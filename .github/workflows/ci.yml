name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: antifraud_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        npm install
        cd web && npm install
        cd ../platform/api && pip install -r requirements.txt
        cd ../platform/mobile && npm install
    
    - name: Lint web code
      run: |
        cd web && npm run lint
    
    - name: Lint API code
      run: |
        cd platform/api && black --check src/ && isort --check-only src/
    
    - name: Type check web
      run: |
        cd web && npm run type-check
    
    - name: Run API tests
      run: |
        cd platform/api && python -m pytest tests/ -v --cov=src --cov-report=xml
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/antifraud_test
        REDIS_URL: redis://localhost:6379
    
    - name: Run E2E tests
      run: |
        npx playwright install
        npx playwright test
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:password@localhost:5432/antifraud_test
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./platform/api/coverage.xml
        flags: api
        name: api-coverage

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        npm install
        cd web && npm install
        cd ../platform/api && pip install -r requirements.txt
    
    - name: Build web application
      run: |
        cd web && npm run build
    
    - name: Build API Docker image
      run: |
        cd platform/api && docker build -t antifraud-api:latest .
    
    - name: Build web Docker image
      run: |
        cd web && docker build -t antifraud-web:latest .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./web
    
    - name: Deploy API to Railway
      uses: railway-app/railway-deploy@v1
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: antifraud-api
